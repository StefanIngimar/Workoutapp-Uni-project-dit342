{
	"info": {
		"_postman_id": "e05434bf-d54d-4952-aa3f-1266c9345f66",
		"name": "userTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38104086"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Correct status code\", function() {\r",
							"    var statusCode = pm.response.code;\r",
							"    pm.expect([201]).to.include(statusCode);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var sentData = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"pm.globals.set(\"userId3\", jsonData._id);\r",
							"// pm.globals.set(\"authToken\", jsonData.token);\r",
							"\r",
							"pm.test(\"Correct user response data\", function() {\r",
							"    const fieldsToCompare = ['userName', 'email', 'isAdmin', 'achievements'];\r",
							"    fieldsToCompare.forEach(key => {\r",
							"        pm.test(`Correct response data: ${key}`, function() {\r",
							"            pm.expect(jsonData[key]).to.eql(sentData[key]);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"// pm.test(\"Token is present\", function() {\r",
							"//     pm.expect(jsonData.token).to.be.a('string');\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\": \"Alvukk\",\r\n    \"email\": \"Dianaaa@gmail.com\",\r\n    \"password\": \"hejdasdasd\",\r\n    \"isAdmin\": false,\r\n    \"achievements\": []\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/v1/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Correct status code\", function() {\r",
							"    var statusCode = pm.response.code;\r",
							"    pm.expect([200]).to.include(statusCode);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var sentData = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"\r",
							"pm.test(\"Correct user response data\", function() {\r",
							"    const fieldsToCompare = ['_id','userName', 'email', 'isAdmin'];\r",
							"    fieldsToCompare.forEach(key => {\r",
							"        pm.test(`Correct response data: ${key}`, function() {\r",
							"            pm.expect(jsonData[key]).to.eql(sentData[key]);\r",
							"        });\r",
							"    });\r",
							"});\r",
							"\r",
							"// pm.test(\"Token is present\", function() {\r",
							"//     pm.expect(jsonData.token).to.be.a('string');\r",
							"// });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"_id\" : \"{{userId3}}\",\r\n    \"userName\": \"Alvukk\",\r\n    \"email\": \"Dianaaa@gmail.com\",\r\n    \"password\": \"hejdasdasd\",\r\n    \"isAdmin\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/v1/users/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the incorrect status code\r",
							"pm.test(\"Correct status code\", function() {\r",
							"    var statusCode = pm.response.code;\r",
							"    pm.expect([200]).to.include(statusCode);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct user response data\", function() {\r",
							"    Object.keys(jsonData).forEach(key => {\r",
							"        pm.test(`Correct response data: ${key}`, function() {\r",
							"            pm.expect(jsonData[key]).to.eql(jsonData[key]);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/v1/users",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the incorrect status code\r",
							"pm.test(\"Correct status code\", function() {\r",
							"    var statusCode = pm.response.code;\r",
							"    pm.expect([200]).to.include(statusCode);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct user response data\", function() {\r",
							"    Object.keys(jsonData).forEach(key => {\r",
							"        pm.test(`Correct response data: ${key}`, function() {\r",
							"            pm.expect(jsonData[key]).to.eql(jsonData[key]);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/v1/users/{{userId3}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{userId3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET/userName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Fixed the incorrect status code\r",
							"pm.test(\"Correct status code\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct user response data\", function() {\r",
							"    Object.keys(jsonData).forEach(key => {\r",
							"        pm.test(`Correct response data: ${key}`, function() {\r",
							"            pm.expect(jsonData[key]).to.eql(jsonData[key]);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/v1/users/Alvuk",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"Alvuk"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modfiy one",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Correct status code\", function() {\r",
							"    var statusCode = pm.response.code;\r",
							"    pm.expect([200]).to.include(statusCode);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var sentData = JSON.parse(pm.request.body.raw);\r",
							"\r",
							"\r",
							"if (pm.response.code === 200) {\r",
							"\r",
							"    pm.test(\"Correct user response data\", function() {\r",
							"        Object.keys(sentData).forEach(key => {\r",
							"            pm.test(`Correct response data: ${key}`, function() {\r",
							"                pm.expect(jsonData[key]).to.eql(sentData[key]);\r",
							"            });\r",
							"        });\r",
							"    });\r",
							"} else if (pm.response.code === 400 && jsonData.userName === sentData.userName) {\r",
							"    pm.test(\"Username already exists\", function() {\r",
							"        pm.expect(jsonData.error).to.include(\"Username already exists\");\r",
							"    });\r",
							"} else if (pm.response.code === 400 && jsonData.email === sentData.email) {\r",
							"    pm.test(\"Email already in use\", function() {\r",
							"        pm.expect(jsonData.error).to.include(\"Email already in use\");\r",
							"    });\r",
							"}else if (pm.response.code === 400 && jsonData.email === sentData.email && jsonData.userName === sentData.userName) {\r",
							"    pm.test(\"Username and email already exist\", function() {\r",
							"        pm.expect(jsonData.error).to.include(\"Username and email already exist\");\r",
							"    });\r",
							"} \r",
							"else if (pm.response.code === 404) {\r",
							"    pm.test(\"User not found\", function() {\r",
							"        pm.expect(jsonData.error).to.include(\"User not found\");\r",
							"    });\r",
							"} "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userName\": \"Alvuk\",\r\n    \"password\": \"hejdasdasd\",\r\n    \"email\": \"alexvuckovic@gmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/v1/users/{{userId3}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{userId3}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE one",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Correct status code\", function() {\r",
							"    var statusCode = pm.response.code;\r",
							"    pm.expect([200]).to.include(statusCode);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Correct user response data\", function() {\r",
							"    Object.keys(jsonData).forEach(key => {\r",
							"        pm.test(`Correct response data: ${key}`, function() {\r",
							"            pm.expect(jsonData[key]).to.eql(jsonData[key]);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/api/v1/users/{{userId3}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						"{{userId3}}"
					]
				}
			},
			"response": []
		}
	]
}